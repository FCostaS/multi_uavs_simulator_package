<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from erlecopter_base.xacro          | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="erlecopter" xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- <arg name="nspace" default="lizhi" /> -->
  <link name="base_link"/>
  <!-- Parachute attach point -${M_PI/2} -->
  <!--  <link name="chute_anchor_link">
    <origin xyz="-0.3 0 0 0" rpy="0 0 0" />
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
      </geometry>
    </visual>
  </link>
  <joint name="chute_anchor_link_joint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <parent link="base_link" />
    <child link="chute_anchor_link" />
  </joint> -->
  <joint name="base_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="base_link"/>
    <child link="base_link_inertia"/>
  </joint>
  <link name="base_link_inertia">
    <inertial>
      <mass value="1.1"/>
      <!-- [kg] -->
      <origin xyz="0 0 0"/>
      <inertia ixx="0.0347563" ixy="0.0" ixz="0.0" iyy="0.0458929" iyz="0.0" izz="0.0977"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://ardupilot_sitl_gazebo_plugin/meshes/meshes_drones/erlecopter.dae" scale="1 1 1"/>
        <!-- <box size="${body_width} ${body_width} ${body_height}"/> -->
        <!-- [m] [m] [m] -->
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.18 0.12 0.1"/>
        <!-- [m] [m] [m] -->
      </geometry>
    </collision>
  </link>
  <!-- attach multirotor_base_plugin to the base_link -->
  <gazebo>
    <plugin filename="librotors_gazebo_multirotor_base_plugin.so" name="rosbag">
      <robotNamespace>uav1/erlecopter</robotNamespace>
      <linkName>base_link</linkName>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
    </plugin>
  </gazebo>
  <!-- <gazebo reference="base_link"> -->
  <gazebo reference="base_link_inertia">
    <material>Gazebo/DarkGrey</material>
  </gazebo>
  <!-- Recorder cameras -->
  <!-- <xacro:include filename="$(find ardupilot_sitl_gazebo_plugin)/urdf/recorder_camera.xacro" /> -->
  <!--
<xacro:recorder_camera
    name="recorder_cam_front_with_uav"
    parent="base_link"
    ros_topic="recorder_cam_front_with_uav"
    update_rate="90"
    res_x="1680"
    res_y="1050"
    image_format="R8G8B8"
    hfov="81"
    video_dir="/home/aurelien/Videos/shots/"
    video_filename="cam_front_with_uav"
    video_fileext="avi">
    <origin xyz="-0.8 0.0 0.12" rpy="0 0 0"/>
  </xacro:recorder_camera>
-->
  <!--
  <xacro:recorder_camera
    name="recorder_cam_front_with_uav2"
    parent="base_link"
    ros_topic="recorder_cam_front_with_uav2"
    update_rate="30"
    res_x="1680"
    res_y="1050"
    image_format="R8G8B8"
    hfov="81"
    video_dir="/home/aurelien/Videos/shots/"
    video_filename="cam_front_with_uav2"
    video_fileext="avi">
    <origin xyz="-0.3 0.0 0.15" rpy="0 0.2 0"/>
  </xacro:recorder_camera>
  -->
  <!--
  <xacro:recorder_camera
    name="recorder_cam_rear_with_uav"
    parent="base_link"
    ros_topic="recorder_cam_rear_with_uav"
    update_rate="30"
    res_x="1680"
    res_y="1050"
    image_format="R8G8B8"
    hfov="81"
    video_dir="/home/aurelien/Videos/shots/"
    video_filename="cam_rear_with_uav"
    video_fileext="avi">
    <origin xyz="0.6 0.0 -0.12" rpy="0 ${-20*M_PI/180} ${180*M_PI/180}"/>
  </xacro:recorder_camera> 
  -->
  <!--
  <xacro:recorder_camera
    name="recorder_cam_rear_with_uav2"
    parent="base_link"
    ros_topic="recorder_cam_rear_with_uav2"
    update_rate="90"
    res_x="1680"
    res_y="1050"
    image_format="R8G8B8"
    hfov="81"
    video_dir="/home/aurelien/Videos/shots/"
    video_filename="cam_rear_with_uav2"
    video_fileext="avi">
    <origin xyz="0.4 0.0 0.12" rpy="0 ${20*M_PI/180} ${180*M_PI/180}"/>
  </xacro:recorder_camera> 
  -->
  <!-- Recorder cameras END -->
  <joint name="sonar_joint" type="fixed">
    <origin rpy="0 1.57079632679 0" xyz="0.12 0.0 0.0"/>
    <parent link="base_link"/>
    <child link="sonar_link"/>
  </joint>
  <link name="sonar_link">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <!--<box size="0.01 0.01 0.01" /> -->
        <!-- <mesh filename="package://rotors_description/meshes/sonar_sensor/max_sonar_ez4.dae"/> -->
        <mesh filename="package://ardupilot_sitl_gazebo_plugin/meshes/meshes_sensors/lidar_lite_v2/meshes/lidar_lite_v2.dae"/>
        <!-- <mesh filename="model://${sensor_mesh}"/> -->
        <!-- <mesh filename="package://ardupilot_sitl_gazebo_plugin/meshes/lidar_lite_v2/meshes/lidar_lite_v2.dae"/> -->
      </geometry>
    </visual>
    <!--   <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <box size="0.01 0.01 0.01" />
        </geometry>
      </collision> -->
  </link>
  <gazebo reference="sonar_link">
    <sensor name="sonar" type="ray">
      <always_on>true</always_on>
      <update_rate>10</update_rate>
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>1</samples>
            <resolution>1</resolution>
            <min_angle>-0.00872664625997</min_angle>
            <max_angle> 0.00872664625997</max_angle>
          </horizontal>
          <vertical>
            <samples>1</samples>
            <resolution>1</resolution>
            <min_angle>-0.00872664625997</min_angle>
            <max_angle> 0.00872664625997</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.01</min>
          <max>50.0</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <!--     <plugin name="gazebo_ros_${name}_controller" filename="librotors_gazebo_sonar_plugin.so">  -->
      <plugin filename="libhector_gazebo_ros_sonar.so" name="gazebo_ros_sonar_controller">
        <gaussianNoise>0.005</gaussianNoise>
        <topicName>uav1/erlecopter/sonar_down</topicName>
        <frameId>sonar_link</frameId>
      </plugin>
    </sensor>
  </gazebo>
  <!-- Frontal range sensor -->
  <!--  <xacro:sonar_sensor
    name="sonar2"
    parent="base_link"
    ros_topic="sonar_front"
    update_rate="10"
    min_range="0.01"
    max_range="50.0"
    field_of_view="${1*M_PI/180}"
    ray_count="1"
    sensor_mesh="lidar_lite_v2_withRay/meshes/lidar_lite_v2_withRay.dae">
    <origin xyz="0.13 0.0 0.02" rpy="0 0 0"/>
  </xacro:sonar_sensor> -->
  <joint name="sonar2_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.13 0.0 0.02"/>
    <parent link="base_link"/>
    <child link="sonar2_link"/>
  </joint>
  <link name="sonar2_link">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <!--<box size="0.01 0.01 0.01" /> -->
        <!-- <mesh filename="package://rotors_description/meshes/sonar_sensor/max_sonar_ez4.dae"/> -->
        <!--<mesh filename="package://ardupilot_sitl_gazebo_plugin/meshes/${sensor_mesh}"/>-->
        <mesh filename="package://ardupilot_sitl_gazebo_plugin/meshes/meshes_sensors/lidar_lite_v2/meshes/lidar_lite_v2.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="sonar2_link">
    <sensor name="sonar2" type="ray">
      <always_on>true</always_on>
      <update_rate>10</update_rate>
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>140</samples>
            <resolution>0.5</resolution>
            <min_angle>-0.610865238198</min_angle>
            <max_angle> 0.610865238198</max_angle>
          </horizontal>
          <vertical>
            <samples>1</samples>
            <resolution>1</resolution>
            <min_angle>-0.00872664625997</min_angle>
            <max_angle> 0.00872664625997</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.01</min>
          <max>10.0</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <!--   <plugin name="gazebo_ros_${name}_controller" filename="librotors_gazebo_sonar_plugin.so"> -->
      <plugin filename="libhector_gazebo_ros_sonar.so" name="gazebo_ros_sonar2_controller">
        <gaussianNoise>0.005</gaussianNoise>
        <topicName>uav1/erlecopter/sonar_front</topicName>
        <frameId>sonar2_link</frameId>
      </plugin>
      <plugin filename="libgazebo_ros_laser.so" name="gazebo_ros_sonar2_controller">
        <topicName>/scan</topicName>
        <frameName>sonar2_link</frameName>
      </plugin>
    </sensor>
  </gazebo>
  <!-- Downward facing camera -->
  <!-- <xacro:include filename="$(find ardupilot_sitl_gazebo_plugin)/urdf/sensors/generic_camera.urdf.xacro" />
  <xacro:generic_camera
    name="erlecopter/bottom"
    parent="base_link"
    ros_topic="image_raw"
    cam_info_topic="camera_info"
    update_rate="60"
    res_x="640"
    res_y="360"
    image_format="R8G8B8"
    hfov="81"
    framename="erlecopter_bottomcam">
    <origin xyz="0.14 0.0 -0.02" rpy="0 ${M_PI/2} 0"/>
  </xacro:generic_camera>  -->
  <!-- Front facing camera -->
  <!-- <xacro:include filename="$(find ardupilot_sitl_gazebo_plugin)/urdf/sensors/generic_camera.urdf.xacro" />
  <xacro:generic_camera
    name="erlecopter/front"
    parent="base_link"
    ros_topic="image_front_raw"
    cam_info_topic="camera_front_info"
    update_rate="25"
    res_x="640"
    res_y="360"
    image_format="R8G8B8"
    hfov="81"
    framename="erlecopter_frontcam">
    <origin xyz="0.17 0.0 0.0" rpy="0 0 0"/>
  </xacro:generic_camera>  -->
  <joint name="rotor_0_joint" type="continuous">
    <origin rpy="0 0 0" xyz="0.141 -0.141 0.03"/>
    <axis xyz="0 0 1"/>
    <!-- TODO(ff): not currently set because it's not yet supported -->
    <!-- <limit effort="2000" velocity="${max_rot_velocity}" /> -->
    <parent link="base_link"/>
    <child link="rotor_0"/>
  </joint>
  <!-- TODO(ff): not currently set because it's not yet supported -->
  <!-- <gazebo reference="rotor_${motor_number}_joint"> <axis> <xyz>0 0 1</xyz>
      <limit> <velocity> ${max_rot_velocity} </velocity> </limit> </axis> </gazebo> -->
  <link name="rotor_0">
    <inertial>
      <mass value="0.005"/>
      <!-- [kg] -->
      <inertia ixx="9.75e-07" ixy="0.0" ixz="0.0" iyy="0.0002400375" iyz="0.0" izz="0.0002409375"/>
    </inertial>
    <visual>
      <geometry>
        <!-- <cylinder length="0.005" radius="${radius_rotor}"/> -->
        <!-- [m] -->
        <!-- <mesh filename="package://rotors_description/meshes/propeller_${direction}.dae" -->
        <mesh filename="package://ardupilot_sitl_gazebo_plugin/meshes/meshes_drones/erlecopter_prop_ccw.dae" scale="1 1 1"/>
        <!-- <box size="${2*radius_rotor} 0.01 0.005"/> -->
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.005" radius="0.12"/>
        <!-- [m] -->
      </geometry>
    </collision>
  </link>
  <gazebo>
    <plugin filename="librotors_gazebo_motor_model.so" name="front_right_motor_model">
      <robotNamespace>uav1/erlecopter</robotNamespace>
      <!-- HS-edit inluded uav/-->
      <jointName>rotor_0_joint</jointName>
      <linkName>rotor_0</linkName>
      <turningDirection>ccw</turningDirection>
      <timeConstantUp>0.0125</timeConstantUp>
      <timeConstantDown>0.025</timeConstantDown>
      <maxRotVelocity>838</maxRotVelocity>
      <motorConstant>8.54858e-06</motorConstant>
      <momentConstant>0.016</momentConstant>
      <commandSubTopic>gazebo/command/motor_speed</commandSubTopic>
      <motorNumber>0</motorNumber>
      <rotorDragCoefficient>8.06428e-05</rotorDragCoefficient>
      <rollingMomentCoefficient>1e-06</rollingMomentCoefficient>
      <motorSpeedPubTopic>motor_speed/0</motorSpeedPubTopic>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
    </plugin>
  </gazebo>
  <gazebo reference="rotor_0">
    <material>Gazebo/Yellow</material>
  </gazebo>
  <joint name="rotor_1_joint" type="continuous">
    <origin rpy="0 0 0" xyz="-0.141 0.141 0.03"/>
    <axis xyz="0 0 1"/>
    <!-- TODO(ff): not currently set because it's not yet supported -->
    <!-- <limit effort="2000" velocity="${max_rot_velocity}" /> -->
    <parent link="base_link"/>
    <child link="rotor_1"/>
  </joint>
  <!-- TODO(ff): not currently set because it's not yet supported -->
  <!-- <gazebo reference="rotor_${motor_number}_joint"> <axis> <xyz>0 0 1</xyz>
      <limit> <velocity> ${max_rot_velocity} </velocity> </limit> </axis> </gazebo> -->
  <link name="rotor_1">
    <inertial>
      <mass value="0.005"/>
      <!-- [kg] -->
      <inertia ixx="9.75e-07" ixy="0.0" ixz="0.0" iyy="0.0002400375" iyz="0.0" izz="0.0002409375"/>
    </inertial>
    <visual>
      <geometry>
        <!-- <cylinder length="0.005" radius="${radius_rotor}"/> -->
        <!-- [m] -->
        <!-- <mesh filename="package://rotors_description/meshes/propeller_${direction}.dae" -->
        <mesh filename="package://ardupilot_sitl_gazebo_plugin/meshes/meshes_drones/erlecopter_prop_ccw.dae" scale="1 1 1"/>
        <!-- <box size="${2*radius_rotor} 0.01 0.005"/> -->
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.005" radius="0.12"/>
        <!-- [m] -->
      </geometry>
    </collision>
  </link>
  <gazebo>
    <plugin filename="librotors_gazebo_motor_model.so" name="back_left_motor_model">
      <robotNamespace>uav1/erlecopter</robotNamespace>
      <!-- HS-edit inluded uav/-->
      <jointName>rotor_1_joint</jointName>
      <linkName>rotor_1</linkName>
      <turningDirection>ccw</turningDirection>
      <timeConstantUp>0.0125</timeConstantUp>
      <timeConstantDown>0.025</timeConstantDown>
      <maxRotVelocity>838</maxRotVelocity>
      <motorConstant>8.54858e-06</motorConstant>
      <momentConstant>0.016</momentConstant>
      <commandSubTopic>gazebo/command/motor_speed</commandSubTopic>
      <motorNumber>1</motorNumber>
      <rotorDragCoefficient>8.06428e-05</rotorDragCoefficient>
      <rollingMomentCoefficient>1e-06</rollingMomentCoefficient>
      <motorSpeedPubTopic>motor_speed/1</motorSpeedPubTopic>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
    </plugin>
  </gazebo>
  <gazebo reference="rotor_1">
    <material>Gazebo/Black</material>
  </gazebo>
  <joint name="rotor_2_joint" type="continuous">
    <origin rpy="0 0 0" xyz="0.141 0.141 0.03"/>
    <axis xyz="0 0 1"/>
    <!-- TODO(ff): not currently set because it's not yet supported -->
    <!-- <limit effort="2000" velocity="${max_rot_velocity}" /> -->
    <parent link="base_link"/>
    <child link="rotor_2"/>
  </joint>
  <!-- TODO(ff): not currently set because it's not yet supported -->
  <!-- <gazebo reference="rotor_${motor_number}_joint"> <axis> <xyz>0 0 1</xyz>
      <limit> <velocity> ${max_rot_velocity} </velocity> </limit> </axis> </gazebo> -->
  <link name="rotor_2">
    <inertial>
      <mass value="0.005"/>
      <!-- [kg] -->
      <inertia ixx="9.75e-07" ixy="0.0" ixz="0.0" iyy="0.0002400375" iyz="0.0" izz="0.0002409375"/>
    </inertial>
    <visual>
      <geometry>
        <!-- <cylinder length="0.005" radius="${radius_rotor}"/> -->
        <!-- [m] -->
        <!-- <mesh filename="package://rotors_description/meshes/propeller_${direction}.dae" -->
        <mesh filename="package://ardupilot_sitl_gazebo_plugin/meshes/meshes_drones/erlecopter_prop_cw.dae" scale="1 1 1"/>
        <!-- <box size="${2*radius_rotor} 0.01 0.005"/> -->
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.005" radius="0.12"/>
        <!-- [m] -->
      </geometry>
    </collision>
  </link>
  <gazebo>
    <plugin filename="librotors_gazebo_motor_model.so" name="front_left_motor_model">
      <robotNamespace>uav1/erlecopter</robotNamespace>
      <!-- HS-edit inluded uav/-->
      <jointName>rotor_2_joint</jointName>
      <linkName>rotor_2</linkName>
      <turningDirection>cw</turningDirection>
      <timeConstantUp>0.0125</timeConstantUp>
      <timeConstantDown>0.025</timeConstantDown>
      <maxRotVelocity>838</maxRotVelocity>
      <motorConstant>8.54858e-06</motorConstant>
      <momentConstant>0.016</momentConstant>
      <commandSubTopic>gazebo/command/motor_speed</commandSubTopic>
      <motorNumber>2</motorNumber>
      <rotorDragCoefficient>8.06428e-05</rotorDragCoefficient>
      <rollingMomentCoefficient>1e-06</rollingMomentCoefficient>
      <motorSpeedPubTopic>motor_speed/2</motorSpeedPubTopic>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
    </plugin>
  </gazebo>
  <gazebo reference="rotor_2">
    <material>Gazebo/Yellow</material>
  </gazebo>
  <joint name="rotor_3_joint" type="continuous">
    <origin rpy="0 0 0" xyz="-0.141 -0.141 0.03"/>
    <axis xyz="0 0 1"/>
    <!-- TODO(ff): not currently set because it's not yet supported -->
    <!-- <limit effort="2000" velocity="${max_rot_velocity}" /> -->
    <parent link="base_link"/>
    <child link="rotor_3"/>
  </joint>
  <!-- TODO(ff): not currently set because it's not yet supported -->
  <!-- <gazebo reference="rotor_${motor_number}_joint"> <axis> <xyz>0 0 1</xyz>
      <limit> <velocity> ${max_rot_velocity} </velocity> </limit> </axis> </gazebo> -->
  <link name="rotor_3">
    <inertial>
      <mass value="0.005"/>
      <!-- [kg] -->
      <inertia ixx="9.75e-07" ixy="0.0" ixz="0.0" iyy="0.0002400375" iyz="0.0" izz="0.0002409375"/>
    </inertial>
    <visual>
      <geometry>
        <!-- <cylinder length="0.005" radius="${radius_rotor}"/> -->
        <!-- [m] -->
        <!-- <mesh filename="package://rotors_description/meshes/propeller_${direction}.dae" -->
        <mesh filename="package://ardupilot_sitl_gazebo_plugin/meshes/meshes_drones/erlecopter_prop_cw.dae" scale="1 1 1"/>
        <!-- <box size="${2*radius_rotor} 0.01 0.005"/> -->
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.005" radius="0.12"/>
        <!-- [m] -->
      </geometry>
    </collision>
  </link>
  <gazebo>
    <plugin filename="librotors_gazebo_motor_model.so" name="back_right_motor_model">
      <robotNamespace>uav1/erlecopter</robotNamespace>
      <!-- HS-edit inluded uav/-->
      <jointName>rotor_3_joint</jointName>
      <linkName>rotor_3</linkName>
      <turningDirection>cw</turningDirection>
      <timeConstantUp>0.0125</timeConstantUp>
      <timeConstantDown>0.025</timeConstantDown>
      <maxRotVelocity>838</maxRotVelocity>
      <motorConstant>8.54858e-06</motorConstant>
      <momentConstant>0.016</momentConstant>
      <commandSubTopic>gazebo/command/motor_speed</commandSubTopic>
      <motorNumber>3</motorNumber>
      <rotorDragCoefficient>8.06428e-05</rotorDragCoefficient>
      <rollingMomentCoefficient>1e-06</rollingMomentCoefficient>
      <motorSpeedPubTopic>motor_speed/3</motorSpeedPubTopic>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
    </plugin>
  </gazebo>
  <gazebo reference="rotor_3">
    <material>Gazebo/Black</material>
  </gazebo>
  <!-- in meters above sea level -->
  <gazebo>
    <plugin filename="librotors_gazebo_controller_interface.so" name="controller_interface">
      <robotNamespace>uav1/erlecopter</robotNamespace>
      <commandAttitudeThrustSubTopic>command/attitude</commandAttitudeThrustSubTopic>
      <commandRateThrustSubTopic>command/rate</commandRateThrustSubTopic>
      <commandMotorSpeedSubTopic>command/motor_speed</commandMotorSpeedSubTopic>
      <imuSubTopic>imu</imuSubTopic>
      <motorSpeedCommandPubTopic>gazebo/command/motor_speed</motorSpeedCommandPubTopic>
    </plugin>
  </gazebo>
  <!-- IMU link -->
  <link name="uav1/erlecopter/imu_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.015"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
  </link>
  <!-- IMU joint -->
  <joint name="uav1/erlecopter/imu_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="base_link"/>
    <child link="uav1/erlecopter/imu_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <gazebo>
    <plugin filename="librotors_gazebo_imu_plugin.so" name="rotors_gazebo_imu_plugin">
      <!-- A good description of the IMU parameters can be found in the kalibr documentation:
           https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics -->
      <robotNamespace>uav1/erlecopter</robotNamespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <linkName>uav1/erlecopter/imu_link</linkName>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <imuTopic>imu</imuTopic>
      <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
      <gyroscopeNoiseDensity>0.0003394</gyroscopeNoiseDensity>
      <!-- Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)] -->
      <gyroscopeRandomWalk>3.8785e-05</gyroscopeRandomWalk>
      <!-- Gyroscope bias random walk [rad/s/s/sqrt(Hz)] -->
      <gyroscopeBiasCorrelationTime>1000.0</gyroscopeBiasCorrelationTime>
      <!-- Gyroscope bias correlation time constant [s] -->
      <gyroscopeTurnOnBiasSigma>0.0087</gyroscopeTurnOnBiasSigma>
      <!-- Gyroscope turn on bias standard deviation [rad/s] -->
      <accelerometerNoiseDensity>0.004</accelerometerNoiseDensity>
      <!-- Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)] -->
      <accelerometerRandomWalk>0.006</accelerometerRandomWalk>
      <!-- Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)] -->
      <accelerometerBiasCorrelationTime>300.0</accelerometerBiasCorrelationTime>
      <!-- Accelerometer bias correlation time constant [s] -->
      <accelerometerTurnOnBiasSigma>0.196</accelerometerTurnOnBiasSigma>
      <!-- Accelerometer turn on bias standard deviation [m/s^2] -->
    </plugin>
  </gazebo>
  <!-- Mount a GNSS receiver. -->
  <gazebo>
    <plugin filename="libhector_gazebo_ros_gps.so" name="erlecopter_gps_sim">
      <alwaysOn>true</alwaysOn>
      <bodyName>base_link</bodyName>
      <topicName>uav1/erlecopter/fix</topicName>
      <velocityTopicName>uav1/erlecopter/fix_velocity</velocityTopicName>
      <referenceLatitude>-35.363261</referenceLatitude>
      <referenceLongitude>149.16523</referenceLongitude>
      <referenceHeading>0</referenceHeading>
      <referenceAltitude>584</referenceAltitude>
      <!-- Sensor errors model for GPS Position measures -->
      <!-- Units: [m], and [1/s] for drift frequency -->
      <!-- For now, use Ardupilot's internal error models -->
      <offset>0 0 0</offset>
      <drift>0 0 0</drift>
      <driftFrequency>0 0 0</driftFrequency>
      <gaussianNoise>0 0 0</gaussianNoise>
      <scaleError>1 1 1</scaleError>
      <!-- Note:
       For the moment there is no barometer, so axis Z of the GPS is
       used as a barometer sensor (with the according error model) -->
      <!-- Sensor errors model for GPS Velocity measures -->
      <!-- Units: [m/s], and [1/s] for drift frequency -->
      <!-- For now, use Ardupilot's internal error models -->
      <velocityOffset>0 0 0</velocityOffset>
      <velocityDrift>0 0 0</velocityDrift>
      <velocityDriftFrequency>0 0 0</velocityDriftFrequency>
      <velocityGaussianNoise>0 0 0</velocityGaussianNoise>
      <velocityScaleError>1 1 1</velocityScaleError>
      <!-- Note:
        The velocity Z does not really make sense, it is not used by
        Ardupilot (right?).
        However Z velocity drift is added to the Z position drift. -->
      <!-- Explanations:
         offset:          constant added to the real value
         gaussian noise:  randomly generated noise added to the real value
         drift:           amount of drift
         drift frequency: time constant (as a frequency) for the drift
         scale error:     scaling of the real value (before adding other noises)
       -->
    </plugin>
  </gazebo>
  <!-- Mount an IMU providing ground truth. -->
  <!-- IMU link -->
  <link name="uav1/erlecopter/imugt_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="1e-05"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
  </link>
  <!-- IMU joint -->
  <joint name="uav1/erlecopter/imugt_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="base_link"/>
    <child link="uav1/erlecopter/imugt_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <gazebo>
    <plugin filename="librotors_gazebo_imu_plugin.so" name="rotors_gazebo_imugt_plugin">
      <!-- A good description of the IMU parameters can be found in the kalibr documentation:
           https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics -->
      <robotNamespace>uav1/erlecopter</robotNamespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <linkName>uav1/erlecopter/imugt_link</linkName>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <imuTopic>ground_truth/imu</imuTopic>
      <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
      <gyroscopeNoiseDensity>0.0</gyroscopeNoiseDensity>
      <!-- Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)] -->
      <gyroscopeRandomWalk>0.0</gyroscopeRandomWalk>
      <!-- Gyroscope bias random walk [rad/s/s/sqrt(Hz)] -->
      <gyroscopeBiasCorrelationTime>1000.0</gyroscopeBiasCorrelationTime>
      <!-- Gyroscope bias correlation time constant [s] -->
      <gyroscopeTurnOnBiasSigma>0.0</gyroscopeTurnOnBiasSigma>
      <!-- Gyroscope turn on bias standard deviation [rad/s] -->
      <accelerometerNoiseDensity>0.0</accelerometerNoiseDensity>
      <!-- Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)] -->
      <accelerometerRandomWalk>0.0</accelerometerRandomWalk>
      <!-- Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)] -->
      <accelerometerBiasCorrelationTime>300.0</accelerometerBiasCorrelationTime>
      <!-- Accelerometer bias correlation time constant [s] -->
      <accelerometerTurnOnBiasSigma>0.0</accelerometerTurnOnBiasSigma>
      <!-- Accelerometer turn on bias standard deviation [m/s^2] -->
    </plugin>
  </gazebo>
  <!-- Mount a generic odometry sensor providing ground truth. -->
  <!--(HS_edit) added namespace uav/ -->
  <!--   <xacro:odometry_plugin_macro
      namespace="$(arg nspace)/${namespace}/ground_truth"
      odometry_sensor_suffix="gt"
      parent_link="base_link"
      pose_topic="pose"
      pose_with_covariance_topic="pose_with_covariance"
      position_topic="position"
      transform_topic="transform"
      odometry_topic="odometry"
      parent_frame_id="world"
      
      mass_odometry_sensor="0.00001"
      measurement_divisor="1"
      measurement_delay="0"
      unknown_delay="0.0"
      noise_normal_position="0 0 0"
      noise_normal_quaternion="0 0 0"
      noise_normal_linear_velocity="0 0 0"
      noise_normal_angular_velocity="0 0 0"
      noise_uniform_position="0 0 0"
      noise_uniform_quaternion="0 0 0"
      noise_uniform_linear_velocity="0 0 0"
      noise_uniform_angular_velocity="0 0 0"
      enable_odometry_map="false"
      odometry_map=""
      image_scale=""
    >
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001" /> 
      <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
    </xacro:odometry_plugin_macro> -->
  <gazebo>
    <plugin filename="librotors_gazebo_bag_plugin.so" name="rosbag">
      <robotNamespace>uav1/erlecopter</robotNamespace>
      <bagFileName>log_file</bagFileName>
      <linkName>base_link</linkName>
      <frameId>base_link</frameId>
      <commandAttitudeThrustSubTopic>command/attitude</commandAttitudeThrustSubTopic>
      <commandAttitudeThrustPubTopic>command/attitude</commandAttitudeThrustPubTopic>
      <commandMotorSpeedSubTopic>command/motors</commandMotorSpeedSubTopic>
      <commandMotorSpeedPubTopic>command/motors</commandMotorSpeedPubTopic>
      <commandRateThrustSubTopic>command/rate</commandRateThrustSubTopic>
      <commandRateThrustPubTopic>command/rate</commandRateThrustPubTopic>
      <MotorPubTopic>motors</MotorPubTopic>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
    </plugin>
  </gazebo>
</robot>

